/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EscrowJudgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aiSigner"
      | "cases"
      | "challenge"
      | "challengeSecs"
      | "finalize"
      | "getPartyCaseIds"
      | "nextId"
      | "openCase"
      | "proposeDecision"
      | "submitEvidence"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CaseOpened"
      | "Challenged"
      | "Evidence"
      | "Finalized"
      | "Proposed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "aiSigner", values?: undefined): string;
  encodeFunctionData(functionFragment: "cases", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "challenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeSecs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPartyCaseIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openCase",
    values: [AddressLike, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeDecision",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEvidence",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "aiSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cases", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengeSecs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPartyCaseIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openCase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeDecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEvidence",
    data: BytesLike
  ): Result;
}

export namespace CaseOpenedEvent {
  export type InputTuple = [
    id: BigNumberish,
    client: AddressLike,
    provider: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    client: string,
    provider: string,
    amount: bigint
  ];
  export interface OutputObject {
    id: bigint;
    client: string;
    provider: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengedEvent {
  export type InputTuple = [id: BigNumberish, challenger: AddressLike];
  export type OutputTuple = [id: bigint, challenger: string];
  export interface OutputObject {
    id: bigint;
    challenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EvidenceEvent {
  export type InputTuple = [id: BigNumberish, party: AddressLike, cid: string];
  export type OutputTuple = [id: bigint, party: string, cid: string];
  export interface OutputObject {
    id: bigint;
    party: string;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizedEvent {
  export type InputTuple = [id: BigNumberish, outcome: BigNumberish];
  export type OutputTuple = [id: bigint, outcome: bigint];
  export interface OutputObject {
    id: bigint;
    outcome: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposedEvent {
  export type InputTuple = [
    id: BigNumberish,
    outcome: BigNumberish,
    justification: string
  ];
  export type OutputTuple = [
    id: bigint,
    outcome: bigint,
    justification: string
  ];
  export interface OutputObject {
    id: bigint;
    outcome: bigint;
    justification: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EscrowJudge extends BaseContract {
  connect(runner?: ContractRunner | null): EscrowJudge;
  waitForDeployment(): Promise<this>;

  interface: EscrowJudgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aiSigner: TypedContractMethod<[], [string], "view">;

  cases: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        client: string;
        provider: string;
        token: string;
        amount: bigint;
        evidenceClient: string;
        evidenceProvider: string;
        justification: string;
        deadline: bigint;
        proposedAt: bigint;
        status: bigint;
        outcome: bigint;
      }
    ],
    "view"
  >;

  challenge: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  challengeSecs: TypedContractMethod<[], [bigint], "view">;

  finalize: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getPartyCaseIds: TypedContractMethod<
    [party: AddressLike],
    [bigint[]],
    "view"
  >;

  nextId: TypedContractMethod<[], [bigint], "view">;

  openCase: TypedContractMethod<
    [provider: AddressLike, deadline: BigNumberish, initialEvidences: string[]],
    [bigint],
    "payable"
  >;

  proposeDecision: TypedContractMethod<
    [id: BigNumberish, outcome: BigNumberish, justification: string],
    [void],
    "nonpayable"
  >;

  submitEvidence: TypedContractMethod<
    [id: BigNumberish, cid: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aiSigner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cases"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        client: string;
        provider: string;
        token: string;
        amount: bigint;
        evidenceClient: string;
        evidenceProvider: string;
        justification: string;
        deadline: bigint;
        proposedAt: bigint;
        status: bigint;
        outcome: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "challenge"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "challengeSecs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "finalize"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPartyCaseIds"
  ): TypedContractMethod<[party: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "nextId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openCase"
  ): TypedContractMethod<
    [provider: AddressLike, deadline: BigNumberish, initialEvidences: string[]],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "proposeDecision"
  ): TypedContractMethod<
    [id: BigNumberish, outcome: BigNumberish, justification: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitEvidence"
  ): TypedContractMethod<[id: BigNumberish, cid: string], [void], "nonpayable">;

  getEvent(
    key: "CaseOpened"
  ): TypedContractEvent<
    CaseOpenedEvent.InputTuple,
    CaseOpenedEvent.OutputTuple,
    CaseOpenedEvent.OutputObject
  >;
  getEvent(
    key: "Challenged"
  ): TypedContractEvent<
    ChallengedEvent.InputTuple,
    ChallengedEvent.OutputTuple,
    ChallengedEvent.OutputObject
  >;
  getEvent(
    key: "Evidence"
  ): TypedContractEvent<
    EvidenceEvent.InputTuple,
    EvidenceEvent.OutputTuple,
    EvidenceEvent.OutputObject
  >;
  getEvent(
    key: "Finalized"
  ): TypedContractEvent<
    FinalizedEvent.InputTuple,
    FinalizedEvent.OutputTuple,
    FinalizedEvent.OutputObject
  >;
  getEvent(
    key: "Proposed"
  ): TypedContractEvent<
    ProposedEvent.InputTuple,
    ProposedEvent.OutputTuple,
    ProposedEvent.OutputObject
  >;

  filters: {
    "CaseOpened(uint256,address,address,uint256)": TypedContractEvent<
      CaseOpenedEvent.InputTuple,
      CaseOpenedEvent.OutputTuple,
      CaseOpenedEvent.OutputObject
    >;
    CaseOpened: TypedContractEvent<
      CaseOpenedEvent.InputTuple,
      CaseOpenedEvent.OutputTuple,
      CaseOpenedEvent.OutputObject
    >;

    "Challenged(uint256,address)": TypedContractEvent<
      ChallengedEvent.InputTuple,
      ChallengedEvent.OutputTuple,
      ChallengedEvent.OutputObject
    >;
    Challenged: TypedContractEvent<
      ChallengedEvent.InputTuple,
      ChallengedEvent.OutputTuple,
      ChallengedEvent.OutputObject
    >;

    "Evidence(uint256,address,string)": TypedContractEvent<
      EvidenceEvent.InputTuple,
      EvidenceEvent.OutputTuple,
      EvidenceEvent.OutputObject
    >;
    Evidence: TypedContractEvent<
      EvidenceEvent.InputTuple,
      EvidenceEvent.OutputTuple,
      EvidenceEvent.OutputObject
    >;

    "Finalized(uint256,uint8)": TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;
    Finalized: TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;

    "Proposed(uint256,uint8,string)": TypedContractEvent<
      ProposedEvent.InputTuple,
      ProposedEvent.OutputTuple,
      ProposedEvent.OutputObject
    >;
    Proposed: TypedContractEvent<
      ProposedEvent.InputTuple,
      ProposedEvent.OutputTuple,
      ProposedEvent.OutputObject
    >;
  };
}
